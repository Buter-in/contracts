{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Attest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "emitent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "path",
              "type": "string"
            }
          ],
          "internalType": "struct SBToken_V4.approveSBT",
          "name": "_aSBT",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "emitent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "path",
              "type": "string"
            }
          ],
          "internalType": "struct SBToken_V4.approveSBT",
          "name": "_aSBT",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f35352a9cee07cdbc326e5d3732ea4305ad18b6f3481b090363eb3142f8ba43",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2012571",
    "logsBloom": "0x
    "blockHash": "0x63dc999d8af38881503e77463156d94769c85400ec48452ab25dab2213b68e1b",
    "transactionHash": "0x6f35352a9cee07cdbc326e5d3732ea4305ad18b6f3481b090363eb3142f8ba43",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2012571",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "SBToken Buterin",
    "SBTB",
    "1"
  ],
  "numDeployments": 1,
  "solcInputHash": "2c994420a4e7097f198a42377665149c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Attest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"emitent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"internalType\":\"struct SBToken_V4.approveSBT\",\"name\":\"_aSBT\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"emitent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"internalType\":\"struct SBToken_V4.approveSBT\",\"name\":\"_aSBT\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"events\":{\"Burn(address,uint256)\":{\"details\":\"This emits when an existing SBT is revoked from an account and destroyed by any mechanism. Note: For a reliable `from` parameter, retrieve the transaction's authenticated `from` field.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SBToken_V4.sol\":\"SBToken_V4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"contracts/SBToken_V4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract SBToken_V4 is EIP712{\\n    using ECDSA for bytes32;\\n\\n    struct approveSBT {\\n        address emitent;       \\n        address to;\\n        uint256 nonce;        \\n        string path;\\n    }\\n\\n    bytes32 private constant _TYPEHASH = keccak256(\\\"approveSBT(address emitent,address to,uint256 nonce,string path)\\\");\\n\\n    address public owner;\\n    \\n    string public name;\\n\\n    string public version;\\n\\n    string public symbol;\\n\\n    uint currentTokenId;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal balances;\\n\\n    mapping(uint256 => string) internal paths;\\n\\n    mapping(address => uint256) private nonces;\\n\\n    event Attest(address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev This emits when an existing SBT is revoked from an account and\\n     * destroyed by any mechanism.\\n     * Note: For a reliable `from` parameter, retrieve the transaction's\\n     * authenticated `from` field.\\n     */\\n    event Burn(address indexed from, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    constructor(string memory _name, string memory _symbol, string memory _version) EIP712(_name, _version){\\n        owner = msg.sender;\\n        name = _name;\\n        symbol = _symbol;\\n        currentTokenId = 0;\\n    }\\n\\n    function getNonce(address _from) public view returns (uint256) {\\n        return nonces[_from];\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        require(_owner != address(0), \\\"SBToken: address zero is not a valid owner\\\");\\n        return balances[_owner];\\n    }\\n\\n\\n    function ownerOf(uint256 _tokenId) public view returns (address) {\\n        address _owner = owners[_tokenId];\\n        require(owners[_tokenId] != address(0), \\\"SBToken: invalid token ID\\\");\\n        return _owner;\\n    }\\n\\n    function verify(approveSBT calldata _aSBT, bytes calldata _signature) public view returns (bool) {\\n        address _signer = _hashTypedDataV4(keccak256(abi.encode(\\n            _TYPEHASH,\\n            _aSBT.emitent,\\n            _aSBT.to,\\n            _aSBT.nonce,\\n            keccak256(abi.encodePacked(_aSBT.path))\\n        ))).recover(_signature);\\n        return nonces[_aSBT.to] == _aSBT.nonce && _signer == _aSBT.emitent && _signer == owner;\\n    }\\n\\n    function attest(approveSBT calldata _aSBT, bytes calldata _signature) external returns (uint256) {\\n        require(verify(_aSBT, _signature), \\\"Invalid signature\\\");\\n        require(_aSBT.to == msg.sender, \\\"Invalid sender\\\");\\n        require(_aSBT.to != address(0), \\\"Address is empty\\\");\\n        require(balances[_aSBT.to] == 0, \\\"SBT already exists\\\");\\n        nonces[_aSBT.to] = _aSBT.nonce + 1;\\n\\n        currentTokenId++;\\n        uint256 _tokenId = currentTokenId;\\n\\n        owners[_tokenId] = _aSBT.to;\\n        balances[_aSBT.to] = _tokenId;\\n        paths[_tokenId] = _aSBT.path;\\n\\n        emit Attest(_aSBT.to, _tokenId);\\n        emit Transfer(address(0), _aSBT.to, _tokenId);\\n    }\\n\\n    function burn() external {\\n        address _sender = msg.sender;\\n\\n        require(\\n            balances[_sender] != 0,\\n            \\\"The account does not have any SBT\\\"\\n        );\\n\\n        uint256 _tokenId = balances[_sender];\\n\\n        balances[_sender] = 0;\\n        owners[_tokenId] = address(0);\\n        paths[_tokenId] = '';\\n\\n        emit Burn(_sender, _tokenId);\\n        emit Transfer(_sender, address(0), _tokenId);\\n    }\\n\\n\\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\\n        return paths[_tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xf43b68f93d41ce1dc488fa8c7a52282e909a1773b1026bcc5d391201a3b929c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200281b3803806200281b8339818101604052810190620000389190620003f8565b828160008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000a38184846200016f60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508061012081815250505050505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826001908051906020019062000144929190620001ab565b5081600390805190602001906200015d929190620001ab565b506000600481905550505050620005ee565b600083838346306040516020016200018c9594939291906200052c565b6040516020818303038152906040528051906020012090509392505050565b828054620001b990620005b8565b90600052602060002090601f016020900481019282620001dd576000855562000229565b82601f10620001f857805160ff191683800117855562000229565b8280016001018555821562000229579182015b82811115620002285782518255916020019190600101906200020b565b5b5090506200023891906200023c565b5090565b5b80821115620002575760008160009055506001016200023d565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002c48262000279565b810181811067ffffffffffffffff82111715620002e657620002e56200028a565b5b80604052505050565b6000620002fb6200025b565b9050620003098282620002b9565b919050565b600067ffffffffffffffff8211156200032c576200032b6200028a565b5b620003378262000279565b9050602081019050919050565b60005b838110156200036457808201518184015260208101905062000347565b8381111562000374576000848401525b50505050565b6000620003916200038b846200030e565b620002ef565b905082815260208101848484011115620003b057620003af62000274565b5b620003bd84828562000344565b509392505050565b600082601f830112620003dd57620003dc6200026f565b5b8151620003ef8482602086016200037a565b91505092915050565b60008060006060848603121562000414576200041362000265565b5b600084015167ffffffffffffffff8111156200043557620004346200026a565b5b6200044386828701620003c5565b935050602084015167ffffffffffffffff8111156200046757620004666200026a565b5b6200047586828701620003c5565b925050604084015167ffffffffffffffff8111156200049957620004986200026a565b5b620004a786828701620003c5565b9150509250925092565b6000819050919050565b620004c681620004b1565b82525050565b6000819050919050565b620004e181620004cc565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200051482620004e7565b9050919050565b620005268162000507565b82525050565b600060a082019050620005436000830188620004bb565b620005526020830187620004bb565b620005616040830186620004bb565b620005706060830185620004d6565b6200057f60808301846200051b565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005d157607f821691505b60208210811415620005e857620005e762000589565b5b50919050565b60805160a05160c05160e05161010051610120516121dd6200063e6000396000611007015260006110490152600061102801526000610f5d01526000610fb301526000610fdc01526121dd6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636352211e116100715780636352211e1461015457806370a08231146101845780638da5cb5b146101b457806395d89b41146101d2578063c87b56dd146101f0578063e9f3da4614610220576100a9565b806306fdde03146100ae5780630ab1c9cf146100cc5780632d0335ab146100fc57806344df8e701461012c57806354fd4d5014610136575b600080fd5b6100b6610250565b6040516100c391906115d6565b60405180910390f35b6100e660048036038101906100e1919061168b565b6102de565b6040516100f39190611722565b60405180910390f35b6101166004803603810190610111919061179b565b6104f0565b60405161012391906117e1565b60405180910390f35b610134610539565b005b61013e610778565b60405161014b91906115d6565b60405180910390f35b61016e60048036038101906101699190611828565b610806565b60405161017b9190611864565b60405180910390f35b61019e6004803603810190610199919061179b565b6108eb565b6040516101ab91906117e1565b60405180910390f35b6101bc6109a3565b6040516101c99190611864565b60405180910390f35b6101da6109c7565b6040516101e791906115d6565b60405180910390f35b61020a60048036038101906102059190611828565b610a55565b60405161021791906115d6565b60405180910390f35b61023a6004803603810190610235919061168b565b610afa565b60405161024791906117e1565b60405180910390f35b6001805461025d906118ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610289906118ae565b80156102d65780601f106102ab576101008083540402835291602001916102d6565b820191906000526020600020905b8154815290600101906020018083116102b957829003601f168201915b505050505081565b6000806103ec84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103de7fa1b30a238905a103d2634971f8e02a64a64344a97ba92815aa8db1ab58609d38886000016020810190610360919061179b565b896020016020810190610373919061179b565b8a604001358b806060019061038891906118ef565b604051602001610399929190611991565b604051602081830303815290604052805190602001206040516020016103c39594939291906119c3565b60405160208183030381529060405280519060200120610f18565b610f3290919063ffffffff16565b905084604001356008600087602001602081019061040a919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561048f5750846000016020810190610460919061179b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80156104e6575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b9150509392505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60003390506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156105c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890611a88565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051806020016040528060008152506007600083815260200190815260200160002090805190602001906106d3929190611414565b50808273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca560405160405180910390a380600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60028054610785906118ae565b80601f01602080910402602001604051908101604052809291908181526020018280546107b1906118ae565b80156107fe5780601f106107d3576101008083540402835291602001916107fe565b820191906000526020600020905b8154815290600101906020018083116107e157829003601f168201915b505050505081565b6000806005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff166005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d990611af4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390611b86565b60405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600380546109d4906118ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610a00906118ae565b8015610a4d5780601f10610a2257610100808354040283529160200191610a4d565b820191906000526020600020905b815481529060010190602001808311610a3057829003601f168201915b505050505081565b6060600760008381526020019081526020016000208054610a75906118ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa1906118ae565b8015610aee5780601f10610ac357610100808354040283529160200191610aee565b820191906000526020600020905b815481529060010190602001808311610ad157829003601f168201915b50505050509050919050565b6000610b078484846102de565b610b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3d90611bf2565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16846020016020810190610b70919061179b565b73ffffffffffffffffffffffffffffffffffffffff1614610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd90611c5e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16846020016020810190610bf1919061179b565b73ffffffffffffffffffffffffffffffffffffffff161415610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f90611cca565b60405180910390fd5b600060066000866020016020810190610c61919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd390611d36565b60405180910390fd5b60018460400135610ced9190611d85565b60086000866020016020810190610d04919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060046000815480929190610d5590611ddb565b919050555060006004549050846020016020810190610d74919061179b565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060066000876020016020810190610ddd919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550848060600190610e2b91906118ef565b600760008481526020019081526020016000209190610e4b92919061149a565b5080856020016020810190610e60919061179b565b73ffffffffffffffffffffffffffffffffffffffff167fe9274a84b19e9428826de6bae8c48329354f8f0e73f771b97cae2d9dccd45a2760405160405180910390a380856020016020810190610eb6919061179b565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4509392505050565b6000610f2b610f25610f59565b83611073565b9050919050565b6000806000610f4185856110a6565b91509150610f4e816110f8565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610fd557507f000000000000000000000000000000000000000000000000000000000000000046145b15611002577f00000000000000000000000000000000000000000000000000000000000000009050611070565b61106d7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006112cd565b90505b90565b60008282604051602001611088929190611e91565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156110e85760008060006020860151925060408601519150606086015160001a90506110dc87828585611307565b945094505050506110f1565b60006002915091505b9250929050565b6000600481111561110c5761110b611ec8565b5b81600481111561111f5761111e611ec8565b5b141561112a576112ca565b6001600481111561113e5761113d611ec8565b5b81600481111561115157611150611ec8565b5b1415611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990611f43565b60405180910390fd5b600260048111156111a6576111a5611ec8565b5b8160048111156111b9576111b8611ec8565b5b14156111fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f190611faf565b60405180910390fd5b6003600481111561120e5761120d611ec8565b5b81600481111561122157611220611ec8565b5b1415611262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125990612041565b60405180910390fd5b60048081111561127557611274611ec8565b5b81600481111561128857611287611ec8565b5b14156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c0906120d3565b60405180910390fd5b5b50565b600083838346306040516020016112e89594939291906120f3565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561134257600060039150915061140b565b601b8560ff161415801561135a5750601c8560ff1614155b1561136c57600060049150915061140b565b6000600187878787604051600081526020016040526040516113919493929190612162565b6020604051602081039080840390855afa1580156113b3573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114025760006001925092505061140b565b80600092509250505b94509492505050565b828054611420906118ae565b90600052602060002090601f0160209004810192826114425760008555611489565b82601f1061145b57805160ff1916838001178555611489565b82800160010185558215611489579182015b8281111561148857825182559160200191906001019061146d565b5b5090506114969190611520565b5090565b8280546114a6906118ae565b90600052602060002090601f0160209004810192826114c8576000855561150f565b82601f106114e157803560ff191683800117855561150f565b8280016001018555821561150f579182015b8281111561150e5782358255916020019190600101906114f3565b5b50905061151c9190611520565b5090565b5b80821115611539576000816000905550600101611521565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561157757808201518184015260208101905061155c565b83811115611586576000848401525b50505050565b6000601f19601f8301169050919050565b60006115a88261153d565b6115b28185611548565b93506115c2818560208601611559565b6115cb8161158c565b840191505092915050565b600060208201905081810360008301526115f0818461159d565b905092915050565b600080fd5b600080fd5b600080fd5b60006080828403121561161d5761161c611602565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261164b5761164a611626565b5b8235905067ffffffffffffffff8111156116685761166761162b565b5b60208301915083600182028301111561168457611683611630565b5b9250929050565b6000806000604084860312156116a4576116a36115f8565b5b600084013567ffffffffffffffff8111156116c2576116c16115fd565b5b6116ce86828701611607565b935050602084013567ffffffffffffffff8111156116ef576116ee6115fd565b5b6116fb86828701611635565b92509250509250925092565b60008115159050919050565b61171c81611707565b82525050565b60006020820190506117376000830184611713565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117688261173d565b9050919050565b6117788161175d565b811461178357600080fd5b50565b6000813590506117958161176f565b92915050565b6000602082840312156117b1576117b06115f8565b5b60006117bf84828501611786565b91505092915050565b6000819050919050565b6117db816117c8565b82525050565b60006020820190506117f660008301846117d2565b92915050565b611805816117c8565b811461181057600080fd5b50565b600081359050611822816117fc565b92915050565b60006020828403121561183e5761183d6115f8565b5b600061184c84828501611813565b91505092915050565b61185e8161175d565b82525050565b60006020820190506118796000830184611855565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118c657607f821691505b602082108114156118da576118d961187f565b5b50919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261190c5761190b6118e0565b5b80840192508235915067ffffffffffffffff82111561192e5761192d6118e5565b5b60208301925060018202360383131561194a576119496118ea565b5b509250929050565b600081905092915050565b82818337600083830152505050565b60006119788385611952565b935061198583858461195d565b82840190509392505050565b600061199e82848661196c565b91508190509392505050565b6000819050919050565b6119bd816119aa565b82525050565b600060a0820190506119d860008301886119b4565b6119e56020830187611855565b6119f26040830186611855565b6119ff60608301856117d2565b611a0c60808301846119b4565b9695505050505050565b7f546865206163636f756e7420646f6573206e6f74206861766520616e7920534260008201527f5400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a72602183611548565b9150611a7d82611a16565b604082019050919050565b60006020820190508181036000830152611aa181611a65565b9050919050565b7f5342546f6b656e3a20696e76616c696420746f6b656e20494400000000000000600082015250565b6000611ade601983611548565b9150611ae982611aa8565b602082019050919050565b60006020820190508181036000830152611b0d81611ad1565b9050919050565b7f5342546f6b656e3a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000611b70602a83611548565b9150611b7b82611b14565b604082019050919050565b60006020820190508181036000830152611b9f81611b63565b9050919050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000611bdc601183611548565b9150611be782611ba6565b602082019050919050565b60006020820190508181036000830152611c0b81611bcf565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000611c48600e83611548565b9150611c5382611c12565b602082019050919050565b60006020820190508181036000830152611c7781611c3b565b9050919050565b7f4164647265737320697320656d70747900000000000000000000000000000000600082015250565b6000611cb4601083611548565b9150611cbf82611c7e565b602082019050919050565b60006020820190508181036000830152611ce381611ca7565b9050919050565b7f53425420616c7265616479206578697374730000000000000000000000000000600082015250565b6000611d20601283611548565b9150611d2b82611cea565b602082019050919050565b60006020820190508181036000830152611d4f81611d13565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d90826117c8565b9150611d9b836117c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611dd057611dcf611d56565b5b828201905092915050565b6000611de6826117c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e1957611e18611d56565b5b600182019050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611e5a600283611952565b9150611e6582611e24565b600282019050919050565b6000819050919050565b611e8b611e86826119aa565b611e70565b82525050565b6000611e9c82611e4d565b9150611ea88285611e7a565b602082019150611eb88284611e7a565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611f2d601883611548565b9150611f3882611ef7565b602082019050919050565b60006020820190508181036000830152611f5c81611f20565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611f99601f83611548565b9150611fa482611f63565b602082019050919050565b60006020820190508181036000830152611fc881611f8c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061202b602283611548565b915061203682611fcf565b604082019050919050565b6000602082019050818103600083015261205a8161201e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006120bd602283611548565b91506120c882612061565b604082019050919050565b600060208201905081810360008301526120ec816120b0565b9050919050565b600060a08201905061210860008301886119b4565b61211560208301876119b4565b61212260408301866119b4565b61212f60608301856117d2565b61213c6080830184611855565b9695505050505050565b600060ff82169050919050565b61215c81612146565b82525050565b600060808201905061217760008301876119b4565b6121846020830186612153565b61219160408301856119b4565b61219e60608301846119b4565b9594505050505056fea26469706673582212205e7e67f7af25c0b2a430a3227e51c3805f2920df23b5a483889c49b8cbf3e3d264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636352211e116100715780636352211e1461015457806370a08231146101845780638da5cb5b146101b457806395d89b41146101d2578063c87b56dd146101f0578063e9f3da4614610220576100a9565b806306fdde03146100ae5780630ab1c9cf146100cc5780632d0335ab146100fc57806344df8e701461012c57806354fd4d5014610136575b600080fd5b6100b6610250565b6040516100c391906115d6565b60405180910390f35b6100e660048036038101906100e1919061168b565b6102de565b6040516100f39190611722565b60405180910390f35b6101166004803603810190610111919061179b565b6104f0565b60405161012391906117e1565b60405180910390f35b610134610539565b005b61013e610778565b60405161014b91906115d6565b60405180910390f35b61016e60048036038101906101699190611828565b610806565b60405161017b9190611864565b60405180910390f35b61019e6004803603810190610199919061179b565b6108eb565b6040516101ab91906117e1565b60405180910390f35b6101bc6109a3565b6040516101c99190611864565b60405180910390f35b6101da6109c7565b6040516101e791906115d6565b60405180910390f35b61020a60048036038101906102059190611828565b610a55565b60405161021791906115d6565b60405180910390f35b61023a6004803603810190610235919061168b565b610afa565b60405161024791906117e1565b60405180910390f35b6001805461025d906118ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610289906118ae565b80156102d65780601f106102ab576101008083540402835291602001916102d6565b820191906000526020600020905b8154815290600101906020018083116102b957829003601f168201915b505050505081565b6000806103ec84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103de7fa1b30a238905a103d2634971f8e02a64a64344a97ba92815aa8db1ab58609d38886000016020810190610360919061179b565b896020016020810190610373919061179b565b8a604001358b806060019061038891906118ef565b604051602001610399929190611991565b604051602081830303815290604052805190602001206040516020016103c39594939291906119c3565b60405160208183030381529060405280519060200120610f18565b610f3290919063ffffffff16565b905084604001356008600087602001602081019061040a919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561048f5750846000016020810190610460919061179b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80156104e6575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b9150509392505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60003390506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156105c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890611a88565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051806020016040528060008152506007600083815260200190815260200160002090805190602001906106d3929190611414565b50808273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca560405160405180910390a380600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60028054610785906118ae565b80601f01602080910402602001604051908101604052809291908181526020018280546107b1906118ae565b80156107fe5780601f106107d3576101008083540402835291602001916107fe565b820191906000526020600020905b8154815290600101906020018083116107e157829003601f168201915b505050505081565b6000806005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff166005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d990611af4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390611b86565b60405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600380546109d4906118ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610a00906118ae565b8015610a4d5780601f10610a2257610100808354040283529160200191610a4d565b820191906000526020600020905b815481529060010190602001808311610a3057829003601f168201915b505050505081565b6060600760008381526020019081526020016000208054610a75906118ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa1906118ae565b8015610aee5780601f10610ac357610100808354040283529160200191610aee565b820191906000526020600020905b815481529060010190602001808311610ad157829003601f168201915b50505050509050919050565b6000610b078484846102de565b610b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3d90611bf2565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16846020016020810190610b70919061179b565b73ffffffffffffffffffffffffffffffffffffffff1614610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd90611c5e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16846020016020810190610bf1919061179b565b73ffffffffffffffffffffffffffffffffffffffff161415610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f90611cca565b60405180910390fd5b600060066000866020016020810190610c61919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd390611d36565b60405180910390fd5b60018460400135610ced9190611d85565b60086000866020016020810190610d04919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060046000815480929190610d5590611ddb565b919050555060006004549050846020016020810190610d74919061179b565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060066000876020016020810190610ddd919061179b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550848060600190610e2b91906118ef565b600760008481526020019081526020016000209190610e4b92919061149a565b5080856020016020810190610e60919061179b565b73ffffffffffffffffffffffffffffffffffffffff167fe9274a84b19e9428826de6bae8c48329354f8f0e73f771b97cae2d9dccd45a2760405160405180910390a380856020016020810190610eb6919061179b565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4509392505050565b6000610f2b610f25610f59565b83611073565b9050919050565b6000806000610f4185856110a6565b91509150610f4e816110f8565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610fd557507f000000000000000000000000000000000000000000000000000000000000000046145b15611002577f00000000000000000000000000000000000000000000000000000000000000009050611070565b61106d7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006112cd565b90505b90565b60008282604051602001611088929190611e91565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156110e85760008060006020860151925060408601519150606086015160001a90506110dc87828585611307565b945094505050506110f1565b60006002915091505b9250929050565b6000600481111561110c5761110b611ec8565b5b81600481111561111f5761111e611ec8565b5b141561112a576112ca565b6001600481111561113e5761113d611ec8565b5b81600481111561115157611150611ec8565b5b1415611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990611f43565b60405180910390fd5b600260048111156111a6576111a5611ec8565b5b8160048111156111b9576111b8611ec8565b5b14156111fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f190611faf565b60405180910390fd5b6003600481111561120e5761120d611ec8565b5b81600481111561122157611220611ec8565b5b1415611262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125990612041565b60405180910390fd5b60048081111561127557611274611ec8565b5b81600481111561128857611287611ec8565b5b14156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c0906120d3565b60405180910390fd5b5b50565b600083838346306040516020016112e89594939291906120f3565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561134257600060039150915061140b565b601b8560ff161415801561135a5750601c8560ff1614155b1561136c57600060049150915061140b565b6000600187878787604051600081526020016040526040516113919493929190612162565b6020604051602081039080840390855afa1580156113b3573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114025760006001925092505061140b565b80600092509250505b94509492505050565b828054611420906118ae565b90600052602060002090601f0160209004810192826114425760008555611489565b82601f1061145b57805160ff1916838001178555611489565b82800160010185558215611489579182015b8281111561148857825182559160200191906001019061146d565b5b5090506114969190611520565b5090565b8280546114a6906118ae565b90600052602060002090601f0160209004810192826114c8576000855561150f565b82601f106114e157803560ff191683800117855561150f565b8280016001018555821561150f579182015b8281111561150e5782358255916020019190600101906114f3565b5b50905061151c9190611520565b5090565b5b80821115611539576000816000905550600101611521565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561157757808201518184015260208101905061155c565b83811115611586576000848401525b50505050565b6000601f19601f8301169050919050565b60006115a88261153d565b6115b28185611548565b93506115c2818560208601611559565b6115cb8161158c565b840191505092915050565b600060208201905081810360008301526115f0818461159d565b905092915050565b600080fd5b600080fd5b600080fd5b60006080828403121561161d5761161c611602565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261164b5761164a611626565b5b8235905067ffffffffffffffff8111156116685761166761162b565b5b60208301915083600182028301111561168457611683611630565b5b9250929050565b6000806000604084860312156116a4576116a36115f8565b5b600084013567ffffffffffffffff8111156116c2576116c16115fd565b5b6116ce86828701611607565b935050602084013567ffffffffffffffff8111156116ef576116ee6115fd565b5b6116fb86828701611635565b92509250509250925092565b60008115159050919050565b61171c81611707565b82525050565b60006020820190506117376000830184611713565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117688261173d565b9050919050565b6117788161175d565b811461178357600080fd5b50565b6000813590506117958161176f565b92915050565b6000602082840312156117b1576117b06115f8565b5b60006117bf84828501611786565b91505092915050565b6000819050919050565b6117db816117c8565b82525050565b60006020820190506117f660008301846117d2565b92915050565b611805816117c8565b811461181057600080fd5b50565b600081359050611822816117fc565b92915050565b60006020828403121561183e5761183d6115f8565b5b600061184c84828501611813565b91505092915050565b61185e8161175d565b82525050565b60006020820190506118796000830184611855565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118c657607f821691505b602082108114156118da576118d961187f565b5b50919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261190c5761190b6118e0565b5b80840192508235915067ffffffffffffffff82111561192e5761192d6118e5565b5b60208301925060018202360383131561194a576119496118ea565b5b509250929050565b600081905092915050565b82818337600083830152505050565b60006119788385611952565b935061198583858461195d565b82840190509392505050565b600061199e82848661196c565b91508190509392505050565b6000819050919050565b6119bd816119aa565b82525050565b600060a0820190506119d860008301886119b4565b6119e56020830187611855565b6119f26040830186611855565b6119ff60608301856117d2565b611a0c60808301846119b4565b9695505050505050565b7f546865206163636f756e7420646f6573206e6f74206861766520616e7920534260008201527f5400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a72602183611548565b9150611a7d82611a16565b604082019050919050565b60006020820190508181036000830152611aa181611a65565b9050919050565b7f5342546f6b656e3a20696e76616c696420746f6b656e20494400000000000000600082015250565b6000611ade601983611548565b9150611ae982611aa8565b602082019050919050565b60006020820190508181036000830152611b0d81611ad1565b9050919050565b7f5342546f6b656e3a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000611b70602a83611548565b9150611b7b82611b14565b604082019050919050565b60006020820190508181036000830152611b9f81611b63565b9050919050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000611bdc601183611548565b9150611be782611ba6565b602082019050919050565b60006020820190508181036000830152611c0b81611bcf565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000611c48600e83611548565b9150611c5382611c12565b602082019050919050565b60006020820190508181036000830152611c7781611c3b565b9050919050565b7f4164647265737320697320656d70747900000000000000000000000000000000600082015250565b6000611cb4601083611548565b9150611cbf82611c7e565b602082019050919050565b60006020820190508181036000830152611ce381611ca7565b9050919050565b7f53425420616c7265616479206578697374730000000000000000000000000000600082015250565b6000611d20601283611548565b9150611d2b82611cea565b602082019050919050565b60006020820190508181036000830152611d4f81611d13565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d90826117c8565b9150611d9b836117c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611dd057611dcf611d56565b5b828201905092915050565b6000611de6826117c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e1957611e18611d56565b5b600182019050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611e5a600283611952565b9150611e6582611e24565b600282019050919050565b6000819050919050565b611e8b611e86826119aa565b611e70565b82525050565b6000611e9c82611e4d565b9150611ea88285611e7a565b602082019150611eb88284611e7a565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611f2d601883611548565b9150611f3882611ef7565b602082019050919050565b60006020820190508181036000830152611f5c81611f20565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611f99601f83611548565b9150611fa482611f63565b602082019050919050565b60006020820190508181036000830152611fc881611f8c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061202b602283611548565b915061203682611fcf565b604082019050919050565b6000602082019050818103600083015261205a8161201e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006120bd602283611548565b91506120c882612061565b604082019050919050565b600060208201905081810360008301526120ec816120b0565b9050919050565b600060a08201905061210860008301886119b4565b61211560208301876119b4565b61212260408301866119b4565b61212f60608301856117d2565b61213c6080830184611855565b9695505050505050565b600060ff82169050919050565b61215c81612146565b82525050565b600060808201905061217760008301876119b4565b6121846020830186612153565b61219160408301856119b4565b61219e60608301846119b4565b9594505050505056fea26469706673582212205e7e67f7af25c0b2a430a3227e51c3805f2920df23b5a483889c49b8cbf3e3d264736f6c63430008090033",
  "devdoc": {
    "details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
    "events": {
      "Burn(address,uint256)": {
        "details": "This emits when an existing SBT is revoked from an account and destroyed by any mechanism. Note: For a reliable `from` parameter, retrieve the transaction's authenticated `from` field."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 794,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 796,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 798,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "version",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 802,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "currentTokenId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 806,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 810,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 814,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "paths",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 818,
        "contract": "contracts/SBToken_V4.sol:SBToken_V4",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}